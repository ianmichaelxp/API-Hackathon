/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ListaProdutos;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-30T11:53:28.518Z")

@Api(value = "produto", description = "the produto API")
public interface ProdutoApi {

    @ApiOperation(value = "Apaga Produto", nickname = "apagaProduto", notes = "Apaga um produto", response = ListaProdutos.class, tags={ "Produtos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Produto apagado", response = ListaProdutos.class),
        @ApiResponse(code = 400, message = "Requisição inválida") })
    @RequestMapping(value = "/produto/{nome_produto}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<ListaProdutos> apagaProduto(@ApiParam(value = "nome do produto",required=true) @PathVariable("nome_produto") Integer nomeProduto);


    @ApiOperation(value = "Atualiza produto", nickname = "atualizaProduto", notes = "Atualiza informação de produto", response = ListaProdutos.class, tags={ "Produtos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Produto atualizado", response = ListaProdutos.class),
        @ApiResponse(code = 400, message = "Requisição inválida") })
    @RequestMapping(value = "/produto/{nome_produto}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ListaProdutos> atualizaProduto(@ApiParam(value = "nome do produto",required=true) @PathVariable("nome_produto") Integer nomeProduto);


    @ApiOperation(value = "Cadastra Produto", nickname = "cadastraProduto", notes = "Cadastra um novo produto", response = ListaProdutos.class, tags={ "Produtos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Novo produto cadastrado", response = ListaProdutos.class),
        @ApiResponse(code = 400, message = "Requisição inválida"),
        @ApiResponse(code = 500, message = "Erro interno no servidor") })
    @RequestMapping(value = "/produto",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ListaProdutos> cadastraProduto(@ApiParam(value = ""  )  @Valid @RequestBody ListaProdutos produto_);


    @ApiOperation(value = "Lista de produtos", nickname = "produtoGet", notes = "Retorna todos os produtos", response = ListaProdutos.class, tags={ "Produtos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista de produtos pronto", response = ListaProdutos.class),
        @ApiResponse(code = 400, message = "Requisição inválida") })
    @RequestMapping(value = "/produto",
        method = RequestMethod.GET)
    ResponseEntity<ListaProdutos> produtoGet();

}
